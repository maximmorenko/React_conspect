import React from 'react';

// Второй способ использовать классы:

// Інший спосіб, щоб визначити React компонент - за допомогою синтаксису ES6 class. 
// В наступному прикладі Kitten розширює React.Component:

 class ClassComponent extends React.Component {
  constructor(props) {
    super(props);
  }

  render() {
    return (
      <h1>Привет, я компонент созданный с помощью класса!</h1>
    );
  }
}
export default ClassComponent;
// Це створює клас ES6 Kitten, який розширює клас React.Component. 
// Отож, клас Kitten тепер має доступ до багатьох корисних функцій React, як наприклад, локальний стан та пастки життєвого циклу. 
// Не хвилюйтеся, якщо ви ще не знайомі з цими термінами, вони будуть детально розкриті у наступних завданнях. 
// Також, зверніть увагу на те, що клас Kitten має constructor визначений через super(). 
// Він використовує super(), щоб викликати конструктора батьківського класу, в цьому випадку React.Component. 
// Конструктор - це спеціальний метод, який використовується під час ініціалізації об'єктів, 
// які було створено за допомогою ключового слова class. 
// Найкраща практика для виклику компоненту constructor - використати super, а потім провести props до обидвох. 
// Це дозволяє впевнитись, що компонент ініціалізовано належним чином. 
// Поки що відомо, що це - стандарт для цього коду. Скоро ви побачите інше використання конструктора, а також props.
// ==================================================================================================================

// Створення компоненту за допомогою композиції

// Тепер ми поглянемо, як ми можемо скласти декілька React разом. 
// Уявіть, що ви створюєте додаток і вже створили три компоненти: Navbar, Dashboard, і Footer.

// Щоб скласти їх разом, ви можете створити компонент App parent, 
// який відображає кожен з цих трьох компонентів як children. 
// Щоб відобразити компонент як дочірній у React компоненті, 
// ви включаєте в перелік ім'я компоненту, написане як власний HTML-тег у JSX. 
// Для прикладу, у методі render ви можете написати:

// return (
//  <App>
//   <Navbar />
//   <Dashboard />
//   <Footer />
//  </App>
// )

// пример добавления дочернего компанента в родительский (расширение класса):

// const ChildComponent = () => {
//   return (
//     <div>
//       <p>I am the child</p>
//     </div>
//   );
// };

// class ParentComponent extends React.Component {
//   constructor(props) {
//     super(props);
//   }
//   render() {
//     return (
//       <div>
//         <h1>I am the parent</h1>
//         { /* Змініть код під цим рядком */ }
//         <ChildComponent />
//         { /* Змініть код над цим рядком */ }
//       </div>
//     );
//   }
// };
// ============================================================================

