import React from "react";
import MyButton from './UI/button/MyButton';

// Поки ви бачили, як використовувати if/else, && та трикомпонентний 
// оператор (condition ? expressionIfTrue : expressionIfFalse) 
// для прийняття умовних рішень про те, що треба рендерити та коли. 
// Проте залишилася ще одна важлива для огляду тема, вивчення якої 
// дозволить поєднувати всі ці поняття з іншою потужною 
// функцією React: пропс. Використання пропсів для умовного 
// рендерингу коду є дуже поширеним явищем серед React-розробників, 
// таким чином, вони використовують значення даного пропсу для 
// автоматичного прийняття рішень про те, що рендерити.

// В цьому завданні вам доведеться налаштовувати дочірній 
// компонент задля прийняття рішень на основі пропс стосовно рендерингу. 
// Також ви зіштовхнетеся з використанням трикомпонентного 
// оператора та побачите, як деякі з інших, описаних у минулих завданнях, 
// понять можуть бути настільки ж корисними у даному контексті.

// Редактор коду складається з двох компонентів, 
// які частково для вас визначені: батьківський, 
// з назвою GameOfChance, та дочірній - Results. 
// Вони використовуються при створенні простих ігор, 
// де користувач натискає клавішу, аби перевірити, 
// виграв він або вона чи ні.

// Перш за все, вам знадобиться простий вираз, 
// який випадковим чином повертає різні значення 
// при кожному запуску. Можна використати Math.random(). 
// Цей метод повертає значення між 0 (включно) 
// та 1 (виключно) кожного разу, коли він викликається. 
// Таким чином, для шансу 50/50 використовуйте у своєму 
// виразі Math.random() >= .5. З точки зору статистики, 
// цей вираз поверне true в 50% випадків та false - в інших 50%. 
// В методі рендерингу, замініть null на вираз, наведений вище, 
// задля завершення оголошення змінної.

// Тепер у вас є вираз, здатний приймати 
// випадкове рішення у коді. Наступне, 
// що треба - це впровадити його. 
// Відрендеріть компонент Results як дочірний 
// від GameOfChance та передайте expression як 
// пропс з назвою fiftyFifty. 
// В компоненті Results напишіть трикомпонентний 
// вираз на основі пропсу fiftyFifty, 
// взятого з GameOfChance, для рендерингу 
// елементу h1 з текстом You Win! або You Lose!. 
// Вкінці переконайтеся, що метод handleClick() 
// правильно обчислює кожний хід, щоб користувач 
// знав скільки разів він зіграв. Це також дозволить 
// користувачеві дізнатися, що компонент дійсно оновився, 
// коли він виграв або програв двічі поспіль.


class Results extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
    <h2>{this.props.fiftyFifty ? "You Win!" : "You Lose!"}</h2>
    );
  }
}

class GameOfChance extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      counter: 1
    };
    this.handleClick = this.handleClick.bind(this);
  }
  handleClick() {
    this.setState({
      // Завершіть операцію повернення:
        counter: this.state.counter + 1
    });
  }
  render() {
    const expression = Math.random() >= 0.5 ? true : false; // З точки зору статистики, цей вираз поверне true в 50% випадків та false - в інших 50%.
    return (
      <div>
        <h3>GAME 50/50</h3>
        <MyButton onClick={this.handleClick}>Play Again</MyButton>
        {/* Змініть код під цим рядком */}
        <Results fiftyFifty={expression} />
        {/* Змініть код над цим рядком */}
        <p>{'Turn: ' + this.state.counter}</p>
      </div>
    );
  }
}

export default GameOfChance;